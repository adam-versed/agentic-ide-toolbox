---
description: Guidelines for writing jest unit tests
globs: jest.config.js, jest.setup.ts, tsconfig.js, *.test.tsx, *.test.ts
alwaysApply: false
---
# Jest and TypeScript Testing Best Practices

## Table of Contents
- @Setup and Configuration
- @Writing Effective Tests
- @Mocking Best Practices
- @Common Patterns and Solutions
- @Advanced Techniques

## Setup and Configuration

### Basic Setup
```typescript
// jest.config.js
module.exports = {
  preset: 'ts-jest',
  testEnvironment: 'node',
  moduleFileExtensions: ['ts', 'tsx', 'js', 'jsx', 'json', 'node'],
  transform: {
    '^.+\\.(ts|tsx)$': 'ts-jest',
  },
  testMatch: ['**/__tests__/**/*.[jt]s?(x)', '**/?(*.)+(spec|test).[jt]s?(x)'],
};
```

### TypeScript Configuration
```json
// tsconfig.json
{
  "compilerOptions": {
    "target": "es2017",
    "module": "commonjs",
    "strict": true,
    "esModuleInterop": true,
    "skipLibCheck": true,
    "forceConsistentCasingInFileNames": true,
    "types": ["jest", "node"]
  },
  "include": ["src/**/*", "test/**/*"],
  "exclude": ["node_modules"]
}
```

## Writing Effective Tests

### Test Structure Best Practices

1. **Use Descriptive Test Names**
```typescript
// ❌ Poor naming
test('login works', () => {});

// ✅ Good naming
test('authenticates user with valid credentials and returns JWT token', () => {});
```

2. **Follow the AAA Pattern (Arrange-Act-Assert)**
```typescript
describe('UserService', () => {
  test('should update user profile successfully', () => {
    // Arrange
    const userService = new UserService();
    const userData = { id: 1, name: 'John Doe' };
    
    // Act
    const result = userService.updateProfile(userData);
    
    // Assert
    expect(result).toEqual({
      success: true,
      user: userData
    });
  });
});
```

3. **Group Related Tests**
```typescript
describe('UserAuthentication', () => {
  describe('login', () => {
    test('succeeds with valid credentials', () => {});
    test('fails with invalid password', () => {});
    test('fails with non-existent user', () => {});
  });
  
  describe('logout', () => {
    test('clears user session', () => {});
    test('redirects to login page', () => {});
  });
});
```

## Mocking Best Practices

### Function Mocking

1. **Basic Function Mocking**
```typescript
// Function to mock
const fetchData = async () => {
  // API call
};

// Mock implementation
const mockFetchData = jest.fn().mockResolvedValue({ data: 'test' });
```

2. **Type-Safe Mocking**
```typescript
import { mocked } from 'jest-mock';
import { MyService } from './my-service';

jest.mock('./my-service');

const mockedMyService = mocked(MyService, true);
```

3. **Class Mocking**
```typescript
class DatabaseService {
  async query(sql: string): Promise<any> {
    // Real database query
  }
}

// Mock the entire class
jest.mock('./DatabaseService');

// Or mock specific methods
const mockQuery = jest.fn().mockResolvedValue([{ id: 1 }]);
DatabaseService.prototype.query = mockQuery;
```

### Module Mocking

1. **Auto-mocking Modules**
```typescript
// __mocks__/my-module.ts
export const myFunction = jest.fn();
```

2. **Manual Module Mocking**
```typescript
jest.mock('./my-module', () => ({
  myFunction: jest.fn().mockReturnValue('mocked value'),
  MyClass: jest.fn().mockImplementation(() => ({
    methodOne: jest.fn(),
    methodTwo: jest.fn(),
  })),
}));
```

3. **Partial Module Mocking**
```typescript
import * as myModule from './my-module';

jest.spyOn(myModule, 'specificFunction')
    .mockImplementation(() => 'mocked result');
```

## Common Patterns and Solutions

### Async Testing

1. **Testing Promises**
```typescript
test('async operation completes successfully', async () => {
  const result = await asyncOperation();
  expect(result).toBeDefined();
});
```

2. **Error Handling**
```typescript
test('handles errors appropriately', async () => {
  await expect(asyncOperation()).rejects.toThrow('Error message');
});
```

### Testing HTTP Requests

1. **Using Jest Fetch Mock**
```typescript
import fetchMock from 'jest-fetch-mock';

fetchMock.enableMocks();

beforeEach(() => {
  fetchMock.resetMocks();
});

test('fetches data successfully', async () => {
  fetchMock.mockResponseOnce(JSON.stringify({ data: 'test' }));
  
  const result = await fetchData();
  expect(result.data).toBe('test');
});
```

## Advanced Techniques

### Custom Matchers

```typescript
expect.extend({
  toBeWithinRange(received: number, floor: number, ceiling: number) {
    const pass = received >= floor && received <= ceiling;
    if (pass) {
      return {
        message: () =>
          `expected ${received} not to be within range ${floor} - ${ceiling}`,
        pass: true,
      };
    } else {
      return {
        message: () =>
          `expected ${received} to be within range ${floor} - ${ceiling}`,
        pass: false,
      };
    }
  },
});

// Usage
test('number is within range', () => {
  expect(100).toBeWithinRange(90, 110);
});
```

### Snapshot Testing

```typescript
test('renders component correctly', () => {
  const tree = renderer
    .create(<MyComponent prop="value" />)
    .toJSON();
  expect(tree).toMatchSnapshot();
});
```

### Testing Tips

1. **Keep Tests Focused**
- Test one thing at a time
- Avoid testing implementation details
- Focus on behavior rather than internal state

2. **Maintain Test Independence**
- Each test should be able to run independently
- Clean up after each test
- Don't share state between tests

3. **Use Test Doubles Appropriately**
- Prefer stubs over mocks when possible
- Use spies for verification
- Mock at the same level as module boundaries

4. **Performance Considerations**
- Mock expensive operations
- Use setup and teardown efficiently
- Consider using test.each for data-driven tests

## Best Practices Summary

1. **General Guidelines**
   - Write tests before fixing bugs
   - Keep tests simple and readable
   - Use typescript-specific features like type checking
   - Document complex test scenarios

2. **Mocking Guidelines**
   - Mock at boundaries (HTTP, filesystem, etc.)
   - Use strong typing for mocks
   - Clear all mocks between tests
   - Be explicit about mock implementations

3. **Code Organization**
   - Keep test files close to implementation
   - Use consistent naming conventions
   - Separate test utilities and helpers
   - Maintain test documentation

## Resources and References

- @Jest Official Documentation
- @TypeScript Documentation
- @ts-jest Documentation

