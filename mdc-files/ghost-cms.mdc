---
description: GhostCMS best practices
globs: config.production.json, config.development.json, .ghost-cli, package.json, *.hbs, default.hbs, index.hbs, post.hbs, page.hbs, tag.hbs, author.hbs, error.hbs, theme.yaml, routes.yaml, routes.js, gscan-report.json, *.js, index.js, *.css, *.scss, *.json, *.yaml
alwaysApply: false
---
# Ghost CMS Best Practices and Guidelines

## Table of Contents
- [Setup and Configuration](mdc:#setup-and-configuration)
- [Content Management](mdc:#content-management)
- [Theme Development](mdc:#theme-development)
- [Modern Frontend Integration](mdc:#modern-frontend-integration)
- [Accessibility Guidelines](mdc:#accessibility-guidelines)
- [Performance and SEO Optimization](mdc:#performance-and-seo-optimization)
- [Content Relationships and Organization](mdc:#content-relationships-and-organization)
- [Membership and Subscription Features](mdc:#membership-and-subscription-features)
- [Integration and Extensions](mdc:#integration-and-extensions)
- [Testing Methodology](mdc:#testing-methodology)
- [Build and Deployment](mdc:#build-and-deployment)
- [Advanced Techniques](mdc:#advanced-techniques)
- [Best Practices Summary](mdc:#best-practices-summary)
- [Resources and References](mdc:#resources-and-references)

## Setup and Configuration

### Basic Installation

Ghost requires Node.js and is typically installed using the Ghost CLI tool:

```bash
# Install Ghost CLI globally
npm install ghost-cli@latest -g

# Create a new directory for your Ghost site
mkdir ghost-blog
cd ghost-blog

# Install Ghost in development mode
ghost install local

# Install Ghost in production mode
ghost install
```

### System Requirements

```plaintext
Node.js: v16.14.0 or higher (recommended: LTS version)
MySQL: 5.7 or 8.0 
Ubuntu: 18.04 or 20.04 LTS (recommended for production)
At least 1GB of memory (2GB+ recommended)
```

### Configuration File

```javascript
// config.production.json
{
  "url": "https://your-ghost-blog.com",
  "server": {
    "port": 2368,
    "host": "127.0.0.1"
  },
  "database": {
    "client": "mysql",
    "connection": {
      "host": "localhost",
      "port": 3306,
      "user": "ghost_user",
      "password": "your_password",
      "database": "ghost_db"
    }
  },
  "mail": {
    "transport": "SMTP",
    "options": {
      "service": "Mailgun",
      "host": "smtp.mailgun.org",
      "port": 587,
      "auth": {
        "user": "postmaster@your-domain.com",
        "pass": "your-mailgun-password"
      }
    }
  },
  "logging": {
    "transports": ["file", "stdout"]
  }
}
```

### Environment Setup Best Practices

1. **Use Appropriate Environments**
```plaintext
❌ Poor practice:
Installing production Ghost on development machines
Modifying core files directly

✅ Good practice:
Using ghost install local for development
Using ghost install for production
Using environment-specific configuration files
```

2. **Server Setup**
```plaintext
❌ Poor practice:
Running Ghost as root user
Installing without a reverse proxy

✅ Good practice:
Using a dedicated non-root user
Setting up Nginx or Apache as a reverse proxy
Implementing HTTPS with Let's Encrypt
```

3. **Database Configuration**
```plaintext
❌ Poor practice:
Using default database credentials
Using the same database for development and production

✅ Good practice:
Creating a dedicated MySQL user with limited permissions
Using strong passwords
Regular database backups
```

4. **Environment Variables**
```plaintext
❌ Poor practice:
Hardcoding sensitive information in configuration files
Committing configuration with credentials to version control

✅ Good practice:
Using environment variables for sensitive information
Using different configurations for development and production
Keeping sensitive information outside of version control
```

## Content Management

### Writing Best Practices

1. **Structuring Content**
```plaintext
❌ Poor practice:
Long paragraphs without breaks
No headings or structure
Inconsistent formatting

✅ Good practice:
Using clear headers (H2, H3, H4)
Breaking content into scannable paragraphs
Using lists for sequential or grouped information
Consistent style throughout content
```

2. **SEO-Optimized Titles and Descriptions**
```plaintext
❌ Poor practice:
Title: "Blog Post"
Description: "Information about our services"

✅ Good practice:
Title: "10 Essential Ghost CMS Tips for Content Creators in 2025"
Description: "Learn how to maximize your Ghost CMS workflow with these expert tips that will improve your content quality and save you time."
```

3. **Using the Editor Effectively**
```plaintext
❌ Poor practice:
Ignoring built-in formatting tools
Pasting content directly from Word without cleaning

✅ Good practice:
Using Ghost cards for rich media embeds
Properly formatting with Markdown when needed
Using the built-in image management system
Taking advantage of custom cards
```

### Media Management

1. **Image Optimization**
```plaintext
❌ Poor practice:
Uploading 5MB images directly from your camera
Not providing alt text

✅ Good practice:
Optimizing images to <200KB before upload
Using descriptive alt text that includes keywords when appropriate
Using responsive image sizes with srcset
Storing original images externally for high-res needs
```

2. **Asset Organization**
```plaintext
❌ Poor practice:
Mixing media files without organization
Using generic filenames like "image1.jpg"

✅ Good practice:
Organizing images by content type or date
Using descriptive filenames with keywords
Leveraging Ghost's built-in image optimization
Using a consistent naming convention
```

3. **Embedded Media**
```plaintext
❌ Poor practice:
Direct iframe embeds without optimization
Autoplay media that affects page performance

✅ Good practice:
Using Ghost's built-in embed cards
Lazy-loading non-critical media
Providing fallbacks for embedded content
Keeping embeds responsive for mobile devices
```

## Theme Development

### Theme Structure

The recommended structure of a Ghost theme:

```
.
├── /assets
│   ├── /css
│   ├── /fonts
│   ├── /images
│   └── /js
├── /partials
├── default.hbs
├── index.hbs
├── post.hbs
├── page.hbs
├── tag.hbs
├── author.hbs
├── error.hbs
├── package.json
└── README.md
```

### Required Templates

```handlebars
{{!-- index.hbs - The main template for the home page --}}
{{!< default}}

<div class="container">
  <div class="row">
    {{#foreach posts}}
      <div class="col-md-6 col-lg-4">
        {{> "post-card"}}
      </div>
    {{/foreach}}
  </div>
  
  {{pagination}}
</div>

{{!-- post.hbs - Template for individual posts --}}
{{!< default}}

<article class="post-content {{post_class}}">
  <header class="post-header">
    <h1 class="post-title">{{title}}</h1>
    <div class="post-meta">
      {{#primary_author}}
        <a href="{{url}}">{{name}}</a>
      {{/primary_author}}
      <time datetime="{{date format="YYYY-MM-DD"}}">
        {{date format="D MMMM YYYY"}}
      </time>
    </div>
  </header>
  
  <section class="post-content">
    {{content}}
  </section>
</article>
```

### Component-Based Development

1. **Creating Reusable Partials**
```handlebars
{{!-- partials/post-card.hbs --}}
<div class="post-card">
  {{#if feature_image}}
    <a class="post-card-image-link" href="{{url}}">
      <img class="post-card-image" src="{{feature_image}}" alt="{{title}}" />
    </a>
  {{/if}}
  <div class="post-card-content">
    <h2 class="post-card-title">
      <a href="{{url}}">{{title}}</a>
    </h2>
    <div class="post-card-excerpt">
      <p>{{excerpt words="33"}}</p>
    </div>
    <footer class="post-card-meta">
      {{#primary_author}}
        <span class="post-card-author">{{name}}</span>
      {{/primary_author}}
    </footer>
  </div>
</div>

{{!-- Usage in index.hbs --}}
{{#foreach posts}}
  {{> "post-card"}}
{{/foreach}}
```

2. **Template Inheritance**
```plaintext
❌ Poor practice:
Duplicating header and footer code across templates
Inconsistent layouts between pages

✅ Good practice:
Using the default.hbs as a base template
Using partials for repeated elements
Extending templates with specific content areas
```

3. **Custom Theme Settings**
```javascript
// package.json customization options
"config": {
  "posts_per_page": 6,
  "image_sizes": {
    "xxs": {
      "width": 30
    },
    "xs": {
      "width": 100
    },
    "s": {
      "width": 300
    },
    "m": {
      "width": 600
    },
    "l": {
      "width": 1000
    },
    "xl": {
      "width": 2000
    }
  }
}

// theme.yaml (for theme settings)
settings:
  accentColor:
    type: color
    default: '#3eb0ef'
    group: brand
  showFeaturedPosts:
    type: boolean
    default: true
    group: homepage
  featuredPostsCount:
    type: number
    default: 3
    min: 1
    max: 10
    group: homepage
    dependencies: ['showFeaturedPosts']
```

## Modern Frontend Integration

### Tailwind CSS Integration

1. **Setting Up Tailwind CSS**
```bash
# Install Tailwind CSS and dependencies
npm install tailwindcss postcss autoprefixer

# Create Tailwind config file
npx tailwindcss init
```

```javascript
// tailwind.config.js
module.exports = {
  content: [
    './*.hbs',
    './partials/**/*.hbs'
  ],
  theme: {
    extend: {
      colors: {
        'ghost-accent': 'var(--ghost-accent-color)'
      },
      typography: {
        DEFAULT: {
          css: {
            'code::before': {
              content: '""'
            },
            'code::after': {
              content: '""'
            }
          }
        }
      }
    }
  },
  plugins: [
    require('@tailwindcss/typography')
  ]
};
```

2. **Tailwind CSS Best Practices for Ghost**
```plaintext
❌ Poor practice:
Using @apply directive in production
Creating custom utility classes that duplicate Tailwind functionality
Building large CSS files with unused utilities

✅ Good practice:
Using Tailwind utility classes directly in templates
Using PurgeCSS to remove unused styles
Extending Tailwind's theme for site-specific colors
Setting up a proper build process for production
```

3. **Example Tailwind Usage in Templates**
```handlebars
{{!-- Example of a post card using Tailwind CSS --}}
<div class="bg-white rounded-lg shadow-md overflow-hidden hover:shadow-lg transition-shadow duration-300">
  {{#if feature_image}}
    <a href="{{url}}" class="block aspect-video overflow-hidden">
      <img class="w-full h-full object-cover transition-transform duration-300 hover:scale-105" 
        src="{{feature_image}}" alt="{{title}}">
    </a>
  {{/if}}
  <div class="p-6">
    <h2 class="text-xl font-bold mb-2 text-gray-900 hover:text-blue-600">
      <a href="{{url}}">{{title}}</a>
    </h2>
    <p class="text-gray-700 mb-4 line-clamp-3">{{excerpt words="20"}}</p>
    <div class="flex items-center text-sm text-gray-500">
      {{#primary_author}}
        <img class="w-8 h-8 rounded-full mr-2" src="{{profile_image}}" alt="{{name}}">
        <span>{{name}}</span>
      {{/primary_author}}
    </div>
  </div>
</div>
```

### Alpine.js Integration

1. **Setting Up Alpine.js**
```handlebars
{{!-- In default.hbs before closing body tag --}}
<script defer src="https://unpkg.com/alpinejs@3.x.x/dist/cdn.min.js"></script>
```

2. **Alpine.js Best Practices**
```plaintext
❌ Poor practice:
Using Alpine for complex state management
Overusing Alpine for static content
Not using Alpine's lifecycle hooks properly

✅ Good practice:
Using Alpine for simple interactive components
Keeping Alpine components small and focused
Using x-data for component state
Leveraging x-init for initialization
```

3. **Example Alpine.js Components**
```handlebars
{{!-- Example of a toggle menu with Alpine.js --}}
<div x-data="{ open: false }" class="relative">
  <button @click="open = !open" class="flex items-center text-gray-700 focus:outline-none">
    <span>Menu</span>
    <svg x-bind:class="{'rotate-180': open}" class="w-4 h-4 ml-1 transition-transform" viewBox="0 0 24 24">
      <path d="M7 10l5 5 5-5z"></path>
    </svg>
  </button>
  
  <div x-show="open" @click.away="open = false" 
       x-transition:enter="transition ease-out duration-200"
       x-transition:enter-start="opacity-0 scale-95"
       x-transition:enter-end="opacity-100 scale-100"
       x-transition:leave="transition ease-in duration-150"
       x-transition:leave-start="opacity-100 scale-100"
       x-transition:leave-end="opacity-0 scale-95"
       class="absolute right-0 mt-2 py-2 w-48 bg-white rounded-md shadow-xl z-20">
    <a href="#" class="block px-4 py-2 text-gray-800 hover:bg-gray-100">Link 1</a>
    <a href="#" class="block px-4 py-2 text-gray-800 hover:bg-gray-100">Link 2</a>
    <a href="#" class="block px-4 py-2 text-gray-800 hover:bg-gray-100">Link 3</a>
  </div>
</div>

{{!-- Example of a tabbed interface with Alpine.js --}}
<div x-data="{ tab: 'recent' }">
  <div class="border-b border-gray-200">
    <nav class="flex -mb-px">
      <button @click="tab = 'recent'" 
              :class="{ 'border-blue-500 text-blue-600': tab === 'recent' }" 
              class="px-4 py-2 border-b-2 font-medium text-sm">
        Recent Posts
      </button>
      <button @click="tab = 'featured'" 
              :class="{ 'border-blue-500 text-blue-600': tab === 'featured' }" 
              class="px-4 py-2 border-b-2 font-medium text-sm">
        Featured
      </button>
      <button @click="tab = 'popular'" 
              :class="{ 'border-blue-500 text-blue-600': tab === 'popular' }" 
              class="px-4 py-2 border-b-2 font-medium text-sm">
        Popular
      </button>
    </nav>
  </div>
  
  <div x-show="tab === 'recent'" class="py-4">
    {{#get "posts" limit="5" include="authors"}}
      {{#foreach posts}}
        {{> "post-card-small"}}
      {{/foreach}}
    {{/get}}
  </div>
  
  <div x-show="tab === 'featured'" class="py-4">
    {{#get "posts" filter="featured:true" limit="5" include="authors"}}
      {{#foreach posts}}
        {{> "post-card-small"}}
      {{/foreach}}
    {{/get}}
  </div>
  
  <div x-show="tab === 'popular'" class="py-4">
    {{#get "posts" order="page_views desc" limit="5" include="authors"}}
      {{#foreach posts}}
        {{> "post-card-small"}}
      {{/foreach}}
    {{/get}}
  </div>
</div>
```

## Accessibility Guidelines

### Semantic HTML Structure

1. **Using Proper Semantic Elements**
```plaintext
❌ Poor practice:
<div class="header">...</div>
<div class="navigation">...</div>
<div class="footer">...</div>

✅ Good practice:
<header>...</header>
<nav>...</nav>
<footer>...</footer>
```

2. **Heading Hierarchy**
```plaintext
❌ Poor practice:
Using headings for styling purposes
Skipping heading levels (e.g., h1 to h3)

✅ Good practice:
Maintaining proper heading hierarchy
Using CSS for styling rather than semantic misuse
Ensuring each page has a single h1
```

3. **Form Accessibility**
```handlebars
{{!-- Example of an accessible newsletter signup form --}}
<form class="newsletter-form">
  <div class="form-group">
    <label for="email-input" class="block text-sm font-medium text-gray-700">
      Email address
    </label>
    <div class="mt-1">
      <input type="email" 
             name="email" 
             id="email-input" 
             required
             aria-describedby="email-description"
             class="shadow-sm focus:ring-blue-500 focus:border-blue-500 block w-full sm:text-sm border-gray-300 rounded-md">
    </div>
    <p id="email-description" class="mt-1 text-sm text-gray-500">
      We'll never share your email. Unsubscribe at any time.
    </p>
  </div>
  <button type="submit" 
          aria-label="Subscribe to newsletter"
          class="mt-4 inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
    Subscribe
  </button>
</form>
```

### ARIA Implementation

1. **ARIA Roles and Attributes**
```handlebars
{{!-- Example of ARIA implementation in a navigation menu --}}
<nav aria-label="Main navigation">
  <button aria-expanded="false" 
          aria-controls="main-menu" 
          aria-label="Toggle menu"
          class="menu-toggle">
    Menu
  </button>
  <ul id="main-menu" role="menu" hidden>
    <li role="none">
      <a href="/" role="menuitem">Home</a>
    </li>
    <li role="none">
      <a href="/blog/" role="menuitem">Blog</a>
    </li>
    <li role="none">
      <a href="/about/" role="menuitem">About</a>
    </li>
  </ul>
</nav>
```

2. **Managing Focus States**
```javascript
// Example of managing focus in a modal dialog
const openModalButton = document.querySelector('.open-modal');
const closeModalButton = document.querySelector('.close-modal');
const modal = document.querySelector('.modal');
const focusableElements = modal.querySelectorAll('button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])');
const firstFocusableElement = focusableElements[0];
const lastFocusableElement = focusableElements[focusableElements.length - 1];

function openModal() {
  modal.setAttribute('aria-hidden', 'false');
  modal.style.display = 'block';
  firstFocusableElement.focus();
  
  // Trap focus inside modal
  modal.addEventListener('keydown', trapTabKey);
}

function closeModal() {
  modal.setAttribute('aria-hidden', 'true');
  modal.style.display = 'none';
  openModalButton.focus();
  
  // Remove event listener when modal is closed
  modal.removeEventListener('keydown', trapTabKey);
}

function trapTabKey(e) {
  if (e.key === 'Tab') {
    if (e.shiftKey && document.activeElement === firstFocusableElement) {
      e.preventDefault();
      lastFocusableElement.focus();
    } else if (!e.shiftKey && document.activeElement === lastFocusableElement) {
      e.preventDefault();
      firstFocusableElement.focus();
    }
  }
  
  if (e.key === 'Escape') {
    closeModal();
  }
}

openModalButton.addEventListener('click', openModal);
closeModalButton.addEventListener('click', closeModal);
```

3. **Color Contrast and Text Readability**
```plaintext
❌ Poor practice:
Using low contrast color combinations
Relying solely on color to convey information
Using very small font sizes

✅ Good practice:
Ensuring color contrast ratios meet WCAG standards (4.5:1 for normal text)
Providing text alternatives for color-based information
Using readable font sizes (minimum 16px for body text)
```

### Keyboard Navigation

1. **Keyboard Accessible Components**
```plaintext
❌ Poor practice:
Using non-standard interactive elements without keyboard support
Implementing custom controls without proper keyboard event handling
Creating focus traps without proper management

✅ Good practice:
Ensuring all interactive elements are keyboard accessible
Using tabindex appropriately (avoid positive values)
Testing all user flows with keyboard-only navigation
Providing visible focus indicators
```

2. **Skip Links**
```handlebars
{{!-- In default.hbs at the beginning of body --}}
<a href="#main-content" class="sr-only focus:not-sr-only focus:absolute focus:p-4 focus:bg-white focus:z-50">
  Skip to main content
</a>

{{!-- Later in the template --}}
<main id="main-content" tabindex="-1">
  {{{body}}}
</main>
```

## Performance and SEO Optimization

### SEO Best Practices

1. **Meta Tags and Descriptions**
```handlebars
{{!-- In default.hbs --}}
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  
  <title>{{meta_title}}</title>
  <meta name="description" content="{{meta_description}}">
  
  {{#is "post"}}
    <meta property="og:type" content="article">
    <meta property="og:title" content="{{meta_title}}">
    <meta property="og:description" content="{{meta_description}}">
    {{#if feature_image}}
      <meta property="og:image" content="{{feature_image}}">
    {{/if}}
  {{/is}}
  
  <link rel="canonical" href="{{url absolute="true"}}">
</head>
```

2. **Structured Data Implementation**
```handlebars
<script type="application/ld+json">
{
  "@context": "https://schema.org",
  "@type": "Article",
  "headline": "{{title}}",
  "description": "{{excerpt}}",
  "image": "{{feature_image}}",
  "datePublished": "{{date iso="true"}}",
  "dateModified": "{{updated_at iso="true"}}",
  "author": {
    "@type": "Person",
    "name": "{{primary_author.name}}"
  },
  "publisher": {
    "@type": "Organization",
    "name": "{{@site.title}}",
    "logo": {
      "@type": "ImageObject",
      "url": "{{@site.logo}}"
    }
  },
  "mainEntityOfPage": {
    "@type": "WebPage",
    "@id": "{{url absolute="true"}}"
  }
}
</script>
```

3. **Canonical URLs**
```plaintext
❌ Poor practice:
Multiple URLs pointing to the same content
No canonical URL tags

✅ Good practice:
Using proper canonical tags
Consistent URL structure
Proper redirects for old URLs
```

### Performance Optimization

1. **Asset Optimization**
```plaintext
❌ Poor practice:
Loading all JavaScript in the head
Uncompressed images
Multiple CSS files loaded individually

✅ Good practice:
Minifying CSS and JavaScript files
Compressing images
Lazy loading images
Using async/defer for non-critical scripts
```

2. **Loading Strategies**
```handlebars
{{!-- Critical CSS inline in <head> --}}
<style>
  /* Critical path CSS here */
  body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, sans-serif; margin: 0; }
  .site-header { padding: 1rem; }
  /* ... other critical styles ... */
</style>

{{!-- Deferred non-critical CSS --}}
<link rel="preload" href="{{asset "css/styles.css"}}" as="style" onload="this.onload=null;this.rel='stylesheet'">
<noscript><link rel="stylesheet" href="{{asset "css/styles.css"}}"></noscript>

{{!-- Deferred JavaScript --}}
<script defer src="{{asset "js/main.js"}}"></script>

{{!-- Preload critical fonts --}}
<link rel="preload" href="{{asset "fonts/main-font.woff2"}}" as="font" type="font/woff2" crossorigin>
```

3. **Core Web Vitals Optimization**
```javascript
// Example of using Intersection Observer for lazy loading
document.addEventListener('DOMContentLoaded', function() {
  const lazyImages = document.querySelectorAll('img.lazy');
  
  const imageObserver = new IntersectionObserver((entries, observer) => {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        const img = entry.target;
        img.src = img.dataset.src;
        if (img.dataset.srcset) {
          img.srcset = img.dataset.srcset;
        }
        img.classList.remove('lazy');
        observer.unobserve(img);
      }
    });
  });
  
  lazyImages.forEach(img => imageObserver.observe(img));
});
```

4. **Caching Implementation**
```javascript
// Example Nginx caching configuration for Ghost
location / {
  proxy_pass http://localhost:2368;
  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
  proxy_set_header Host $http_host;
  proxy_set_header X-Forwarded-Proto $scheme;
  proxy_buffering on;
  proxy_buffer_size 8k;
  proxy_buffers 8 32k;
  proxy_busy_buffers_size 64k;
  
  # Caching static assets
  location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg)$ {
    expires 30d;
    add_header Cache-Control "public, no-transform";
  }
}
```

5. **Performance Monitoring**
```javascript
// Example of implementing Web Vitals monitoring
import {getLCP, getFID, getCLS} from 'web-vitals';

function sendToAnalytics({name, delta, id}) {
  // Send metrics to your analytics service
  console.log(`${name}: ${delta}`);
}

// Measure and log Core Web Vitals
getCLS(sendToAnalytics);
getFID(sendToAnalytics);
getLCP(sendToAnalytics);
```

## Content Relationships and Organization

### Tag Management

1. **Primary and Secondary Tags**
```handlebars
{{!-- Display Primary Tag --}}
{{#primary_tag}}
  <a href="{{url}}" class="primary-tag">{{name}}</a>
{{/primary_tag}}

{{!-- Display all other tags except the primary tag --}}
<div class="secondary-tags">
  {{#has tag="count:>1"}}
    {{#foreach tags from="2"}}
      <a href="{{url}}" class="tag">{{name}}</a>
    {{/foreach}}
  {{/has}}
</div>
```

2. **Hierarchical Tag Structure**
```plaintext
❌ Poor practice:
Using random tags without structure
Duplicating tag functionality

✅ Good practice:
Creating a hierarchical tag structure
Using parent-child tag relationships
Using internal tags for organization
```

### Custom Collections

1. **routes.yaml Configuration**
```yaml
routes:
  /featured/:
    controller: channel
    template: featured
    filter: featured:true
    data: page.featured
  /tutorials/:
    permalink: /tutorials/{slug}/
    template: tutorials
    filter: tag:tutorial
    data: tag.tutorial
  
collections:
  /news/:
    permalink: /news/{slug}/
    template: news
    filter: tag:news
    data: tag.news
  /categories/:
    permalink: /categories/{slug}/
    template: category
    filter: tag:[slug]
    data: tag.[slug]
```

2. **Tag-Based Series**
```handlebars
{{!-- Display all posts in a series (using internal tag) --}}
<div class="series-container">
  <h3>Articles in this series</h3>
  {{#get "posts" filter="tag:hash-series-javascript" include="tags" order="published_at asc" as |series|}}
    <ol class="series-list">
      {{#foreach series}}
        <li class="{{#if id=../id}}current-article{{/if}}">
          <a href="{{url}}">{{title}}</a>
        </li>
      {{/foreach}}
    </ol>
  {{/get}}
</div>
```

3. **Custom Taxonomies**
```handlebars
{{!-- Creating custom taxonomies with tag prefix --}}
<div class="taxonomy-container">
  <h3>Browse by topic</h3>
  {{#get "tags" filter="name:^topic-" order="name asc" as |topics|}}
    <ul class="topic-list">
      {{#foreach topics}}
        {{!-- Remove the "topic-" prefix from display name --}}
        <li>
          <a href="{{url}}">{{name replace="topic-" }}</a>
        </li>
      {{/foreach}}
    </ul>
  {{/get}}
</div>
```

## Membership and Subscription Features

### Membership Implementation

1. **Member Sign-up Form**
```handlebars
{{!-- Basic member signup form --}}
<section class="membership-section">
  {{#if @member}}
    <div class="member-welcome">
      <h2>Welcome back, {{@member.name}}!</h2>
      <p>Thanks for being a valued member.</p>
      <a href="/account/" class="btn btn-primary">Manage Account</a>
    </div>
  {{else}}
    <div class="signup-form">
      <h2>Join our community</h2>
      <p>Get access to exclusive content and updates.</p>
      <form data-members-form="signup">
        <div class="form-group">
          <label for="name">Name</label>
          <input id="name" name="name" type="text" required />
        </div>
        <div class="form-group">
          <label for="email">Email</label>
          <input id="email" name="email" data-members-email type="email" required />
        </div>
        <button class="btn btn-primary" type="submit">Subscribe</button>
      </form>
    </div>
  {{/if}}
</section>
```

2. **Member Access Control**
```handlebars
{{!-- Implementing content gating with members-only content --}}
<article class="post">
  <header class="post-header">
    <h1>{{title}}</h1>
  </header>
  
  <div class="post-content">
    {{#if access}}
      {{!-- Full content for members --}}
      {{content}}
    {{else}}
      {{!-- Preview content for non-members --}}
      {{#if @member}}
        {{!-- Member without access (e.g., free member viewing paid content) --}}
        <div class="upgrade-prompt">
          <p>This post is for paying subscribers only.</p>
          <a href="/upgrade/" class="btn btn-primary">Upgrade Subscription</a>
        </div>
      {{else}}
        {{!-- Non-member --}}
        <div class="content-preview">
          {{content words="150"}}
          <div class="signup-prompt">
            <p>To continue reading, sign up or sign in.</p>
            <button class="btn btn-primary" data-portal="signup">Subscribe</button>
            <button class="btn btn-outline" data-portal="signin">Sign In</button>
          </div>
        </div>
      {{/if}}
    {{/if}}
  </div>
</article>
```

3. **Customizing Membership Portal**
```javascript
// Example of customizing Portal in site header
<script>
  window.addEventListener('load', function () {
    window.GhostPortal.init({
      trigger: 'portal-trigger',
      // Customize Portal appearance
      styles: {
        title: 'Join our community',
        buttonIcon: 'auto',
        buttonStyle: 'icon-and-text',
        button: {
          "color": "#ffffff",
          "backgroundColor": "#3eb0ef",
          "borderColor": "#3eb0ef"
        },
        modal: {
          backgroundColor: "#f0f0f0",
          backgroundOpacity: 0.9
        }
      },
      // Custom signup message
      signupButtonText: 'Get premium content',
      // Custom text for buttons and links
      buttonText: 'Subscribe'
    });
  });
</script>
```

### Subscription Tiers

1. **Displaying Subscription Options**
```handlebars
{{!-- Displaying subscription tiers --}}
<div class="subscription-tiers">
  <h2>Choose a subscription plan</h2>
  
  <div class="tier-grid">
    {{#get "tiers" include="monthly_price,yearly_price,benefits" filter="visibility:public" as |tiers|}}
      {{#foreach tiers}}
        <div class="tier-card {{slug}}">
          <div class="tier-header">
            <h3>{{name}}</h3>
            <div class="tier-prices">
              <div class="monthly-price">
                <span class="currency">{{monthly_price.currency_symbol}}</span>
                <span class="amount">{{monthly_price.amount}}</span>
                <span class="period">/month</span>
              </div>
              
              {{#if yearly_price}}
                <div class="yearly-price">
                  <span class="currency">{{yearly_price.currency_symbol}}</span>
                  <span class="amount">{{yearly_price.amount}}</span>
                  <span class="period">/year</span>
                </div>
              {{/if}}
            </div>
          </div>
          
          <div class="tier-description">
            <p>{{description}}</p>
          </div>
          
          <div class="tier-benefits">
            <h4>Benefits:</h4>
            <ul>
              {{#foreach benefits}}
                <li>{{name}}</li>
              {{/foreach}}
            </ul>
          </div>
          
          <div class="tier-actions">
            <button class="btn btn-primary" data-portal="signup" data-tier="{{id}}">
              Subscribe to {{name}}
            </button>
          </div>
        </div>
      {{/foreach}}
    {{/get}}
  </div>
</div>
```

2. **Premium Content Display**
```handlebars
{{!-- Content label for tiers --}}
{{#if visibility}}
  <div class="content-tier-label">
    {{#match visibility "members"}}
      <span class="members-label">Members Only</span>
    {{/match}}
    
    {{#match visibility "paid"}}
      <span class="paid-label">Subscribers Only</span>
    {{/match}}
    
    {{#match visibility "tiers"}}
      <span class="tier-label">
        Available on:
        {{#foreach tiers}}
          <span class="tier-name">{{name}}</span>
        {{/foreach}}
      </span>
    {{/match}}
  </div>
{{/if}}
```

3. **Newsletter Features**
```handlebars
{{!-- Newsletter preferences for members --}}
<div class="newsletter-settings">
  <h3>Newsletter Settings</h3>
  
  {{#if @member}}
    <form data-members-form="newsletters">
      <div class="newsletter-options">
        {{#foreach @member.newsletters}}
          <div class="newsletter-option">
            <input
              type="checkbox"
              id="newsletter-{{id}}"
              name="newsletters"
              value="{{id}}"
              {{#if subscribed}}checked{{/if}}
            />
            <label for="newsletter-{{id}}">
              <strong>{{name}}</strong>
              <p>{{description}}</p>
            </label>
          </div>
        {{/foreach}}
      </div>
      
      <button class="btn btn-primary" type="submit">Save preferences</button>
    </form>
  {{else}}
    <p>Sign up to manage your newsletter preferences.</p>
    <button class="btn btn-primary" data-portal="signup">Subscribe</button>
  {{/if}}
</div>
```

## Integration and Extensions

### Third-party Services

1. **Newsletter Integration**
```javascript
// Example of setting up Mailgun in config.production.json
"mail": {
  "transport": "SMTP",
  "options": {
    "service": "Mailgun",
    "host": "smtp.mailgun.org",
    "port": 587,
    "auth": {
      "user": "postmaster@your-domain.com",
      "pass": "your-mailgun-password"
    }
  }
}
```

2. **Analytics Setup**
```handlebars
{{!-- Integrating Google Analytics in default.hbs --}}
<script async src="https://www.googletagmanager.com/gtag/js?id=GA_MEASUREMENT_ID"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());
  gtag('config', 'GA_MEASUREMENT_ID');
</script>
```

3. **Comments Integration**
```handlebars
{{!-- Adding Disqus comments to post.hbs --}}
{{#contentFor "scripts"}}
<div id="disqus_thread"></div>
<script>
  var disqus_config = function () {
    this.page.url = "{{url absolute="true"}}";
    this.page.identifier = "ghost-{{comment_id}}";
  };
  (function() {
    var d = document, s = d.createElement('script');
    s.src = 'https://YOURDISQUSSHORTNAME.disqus.com/embed.js';
    s.setAttribute('data-timestamp', +new Date());
    (d.head || d.body).appendChild(s);
  })();
</script>
{{/contentFor}}
```

### API Usage

1. **Content API Integration**
```javascript
// Fetch posts using the Content API
const GhostContentAPI = require('@tryghost/content-api');

const api = new GhostContentAPI({
  url: 'https://your-ghost-blog.com',
  key: 'content_api_key',
  version: 'v4'
});

// Fetch all posts with their authors and tags
api.posts
  .browse({
    include: ['authors', 'tags'],
    limit: 5
  })
  .then((posts) => {
    console.log(posts);
  })
  .catch((err) => {
    console.error(err);
  });
```

2. **Custom Routes**
```javascript
// Example custom route in routes.yaml
routes:
  /featured/:
    controller: channel
    template: featured
    filter: featured:true
    data: page.featured
  /newsletter/:
    controller: channel
    template: newsletter
    filter: tag:newsletter
    data: page.newsletter
  
collections:
  /tutorials/:
    permalink: /tutorials/{slug}/
    template: tutorials
    filter: tag:tutorial
    data: tag.tutorial
```

3. **WebHooks**
```plaintext
❌ Poor practice:
Creating multiple webhooks for the same service
Not validating incoming webhook data

✅ Good practice:
Creating focused webhooks for specific events
Implementing proper error handling
Validating webhook data before processing
```

## Testing Methodology

### Theme Testing with GScan

1. **Running GScan**
```bash
# Install GScan globally
npm install -g gscan

# Test a theme directory
gscan /path/to/theme/directory

# Test a zipped theme
gscan /path/to/theme.zip

# Generate HTML report
gscan /path/to/theme/directory --format html --output report.html
```

2. **Common GScan Issues**
```plaintext
❌ Common Issues:
Missing required templates (index.hbs, post.hbs, etc.)
Deprecated helpers usage
Invalid theme structure
Template errors

✅ Best Practices:
Run GScan before deploying themes
Fix all critical errors before deployment
Keep theme compatibility with latest Ghost version
Document any custom theme features
```

### End-to-End Testing

1. **Setting Up Cypress Testing**
```javascript
// Example cypress test for Ghost membership flow
describe('Membership Flow', () => {
  it('should allow users to sign up', () => {
    cy.visit('/');
    
    // Click sign up button
    cy.get('[data-portal="signup"]').click();
    
    // Wait for portal to open
    cy.get('.gh-portal-popup').should('be.visible');
    
    // Fill in sign up form
    cy.get('input[name="name"]').type('Test User');
    cy.get('input[name="email"]').type('test@example.com');
    
    // Submit form
    cy.get('button[type="submit"]').click();
    
    // Check success state
    cy.get('.gh-portal-notification').should('contain', 'Check your inbox');
  });
});
```

2. **Visual Regression Testing**
```javascript
// Example Percy integration with Cypress
describe('Visual Regression', () => {
  it('Homepage should look correct', () => {
    cy.visit('/');
    cy.wait(1000); // Wait for animations
    cy.percySnapshot('Homepage');
  });
  
  it('Post page should look correct', () => {
    cy.visit('/welcome/');
    cy.wait(1000);
    cy.percySnapshot('Sample Post');
  });
  
  it('Tag page should look correct', () => {
    cy.visit('/tag/getting-started/');
    cy.wait(1000);
    cy.percySnapshot('Tag Page');
  });
});
```

3. **Performance Testing**
```javascript
// Example Lighthouse CI configuration
module.exports = {
  ci: {
    collect: {
      url: ['https://your-ghost-blog.com/'],
      numberOfRuns: 3,
    },
    assert: {
      preset: 'lighthouse:recommended',
      assertions: {
        'categories:performance': ['error', {minScore: 0.9}],
        'categories:accessibility': ['error', {minScore: 0.9}],
        'first-contentful-paint': ['error', {maxNumericValue: 2000}],
        'interactive': ['error', {maxNumericValue: 3500}],
      }
    },
    upload: {
      target: 'temporary-public-storage',
    },
  },
};
```

## Build and Deployment

### Asset Optimization

1. **Optimizing CSS and JavaScript**
```javascript
// Example webpack.config.js for theme assets
const path = require('path');
const MiniCssExtractPlugin = require('mini-css-extract-plugin');
const TerserPlugin = require('terser-webpack-plugin');
const CssMinimizerPlugin = require('css-minimizer-webpack-plugin');

module.exports = {
  entry: './assets/js/index.js',
  output: {
    filename: 'main.min.js',
    path: path.resolve(__dirname, 'assets/built'),
  },
  module: {
    rules: [
      {
        test: /\.js$/,
        exclude: /node_modules/,
        use: {
          loader: 'babel-loader',
          options: {
            presets: ['@babel/preset-env']
          }
        }
      },
      {
        test: /\.scss$/,
        use: [
          MiniCssExtractPlugin.loader,
          'css-loader',
          'postcss-loader',
          'sass-loader',
        ],
      }
    ],
  },
  optimization: {
    minimize: true,
    minimizer: [
      new TerserPlugin(),
      new CssMinimizerPlugin(),
    ],
  },
  plugins: [
    new MiniCssExtractPlugin({
      filename: 'main.min.css',
    }),
  ],
};
```

2. **Image Optimization**
```bash
# Using imagemin-cli to optimize images
npm install -g imagemin-cli imagemin-pngquant imagemin-mozjpeg

# Optimize PNG files
imagemin assets/images/*.png --plugin=pngquant --out-dir=assets/images/optimized

# Optimize JPG files
imagemin assets/images/*.jpg --plugin=mozjpeg --out-dir=assets/images/optimized
```

3. **Production Build Process**
```bash
# Example build script in package.json
{
  "scripts": {
    "dev": "webpack --mode development --watch",
    "build": "webpack --mode production && gulp optimize-images",
    "zip": "node scripts/create-theme-zip.js",
    "test": "gscan ."
  }
}
```

### Deployment Strategies

1. **Ghost-CLI Deployment**
```bash
# Install Ghost on production server
ghost install --db=mysql --dbhost=localhost --dbuser=ghost --dbpass=password --dbname=ghost_prod --mail=smtp --mailservice=Mailgun --mailuser=postmaster@yourdomain.com --mailpass=password --title="Your Blog Title" --url=https://yourblog.com --admin-url=https://yourblog.com/ghost --pname=ghost --process=systemd

# Update Ghost
ghost update
```

2. **Continuous Deployment**
```yaml
# Example GitHub Actions workflow for theme deployment
name: Deploy Ghost Theme

on:
  push:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      
      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '16'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build theme
        run: npm run build
        
      - name: Test theme with GScan
        run: npm run test
        
      - name: Create zip
        run: npm run zip
        
      - name: Deploy to Ghost
        uses: TryGhost/action-deploy-theme@v1
        with:
          api-url: ${{ secrets.GHOST_ADMIN_API_URL }}
          api-key: ${{ secrets.GHOST_ADMIN_API_KEY }}
          theme-name: "my-theme"
          zip-path: "./dist/my-theme.zip"
```

3. **Environment Variables**
```yaml
# Example .env file for local development
NODE_ENV=development
GHOST_API_URL=http://localhost:2368
GHOST_CONTENT_API_KEY=your_content_api_key
GHOST_ADMIN_API_KEY=your_admin_api_key

# Never commit this file to version control
```

## Advanced Techniques

### Headless Ghost

1. **Frontend Integration**
```javascript
// Example using Ghost Content API with React
import React, { useState, useEffect } from 'react';
import GhostContentAPI from '@tryghost/content-api';

const api = new GhostContentAPI({
  url: 'https://your-ghost-blog.com',
  key: 'content_api_key',
  version: 'v4'
});

function BlogList() {
  const [posts, setPosts] = useState([]);
  const [loading, setLoading] = useState(true);
  
  useEffect(() => {
    api.posts
      .browse({ limit: 5, include: 'tags,authors' })
      .then((posts) => {
        setPosts(posts);
        setLoading(false);
      })
      .catch((err) => {
        console.error(err);
        setLoading(false);
      });
  }, []);
  
  if (loading) return <p>Loading...</p>;
  
  return (
    <div className="blog-list">
      {posts.map(post => (
        <article key={post.id}>
          <h2>{post.title}</h2>
          <p>{post.excerpt}</p>
          <a href={`/blog/${post.slug}`}>Read more</a>
        </article>
      ))}
    </div>
  );
}
```

2. **Next.js Integration**
```javascript
// Example of fetching Ghost data in Next.js getStaticProps
export async function getStaticProps() {
  const api = new GhostContentAPI({
    url: process.env.GHOST_API_URL,
    key: process.env.GHOST_CONTENT_API_KEY,
    version: 'v4'
  });
  
  const posts = await api.posts
    .browse({
      limit: 'all',
      include: ['tags', 'authors'],
      fields: ['id', 'title', 'slug', 'feature_image', 'excerpt', 'published_at']
    })
    .catch(err => {
      console.error(err);
      return [];
    });
  
  return {
    props: { posts },
    revalidate: 600 // Revalidate the data every 10 minutes
  };
}
```

3. **API Authentication**
```plaintext
❌ Poor practice:
Using Admin API in frontend code
Hardcoding API keys in client-side code

✅ Good practice:
Using Content API for public data
Keeping Admin API usage server-side only
Using environment variables for API keys
Implementing proper authorization in custom integrations
```

### Custom Integrations

1. **Building Ghost Apps**
```javascript
// Example of a simple Ghost App structure
module.exports = {
  name: 'my-custom-integration',
  version: '1.0.0',
  
  install: function(options) {
    // Installation logic
    return Promise.resolve();
  },
  
  uninstall: function() {
    // Cleanup logic
    return Promise.resolve();
  },
  
  activate: function() {
    // Activation logic
    return Promise.resolve();
  },
  
  deactivate: function() {
    // Deactivation logic
    return Promise.resolve();
  }
};
```

2. **Advanced Theme Features**
```javascript
// Example of dynamic routing with params in Ghost theme
// route.js file in theme root
module.exports = [
  {
    path: '/author/:slug/page/:page',
    template: 'author',
    data: function(params) {
      return {
        author: params.slug,
        page: params.page
      };
    }
  },
  {
    path: '/category/:slug',
    template: 'category',
    data: function(params) {
      return {
        tag: params.slug
      };
    }
  }
];
```

```handlebars
{{!-- Example of a custom helper in Ghost theme --}}
{{!-- In helpers/index.js --}}
module.exports = {
  customDate: function(date, options) {
    const moment = require('moment');
    return moment(date).format('MMMM Do, YYYY');
  },
  
  featuredPosts: function(options) {
    const api = options.data.root.api;
    return api.posts
      .browse({
        filter: 'featured:true',
        limit: 3,
        include: ['tags', 'authors']
      })
      .then((posts) => {
        return options.fn(posts);
      });
  }
};

{{!-- Usage in template --}}
<span class="date">{{customDate date}}</span>

{{#featuredPosts}}
  {{#foreach this}}
    <div class="featured-post">
      <h3>{{title}}</h3>
    </div>
  {{/foreach}}
{{/featuredPosts}}
```

3. **Deployment Strategies**
```plaintext
❌ Poor practice:
Directly editing theme files on production
Manual deployments without version control
No staging environment

✅ Good practice:
Using continuous deployment with Git
Implementing staging environments
Using Ghost-CLI for deployment
Validating themes before deployment with gscan
```

## Best Practices Summary

1. **Content Strategy Guidelines**
   - Plan your content structure before scaling
   - Use a consistent tagging system
   - Establish clear editorial guidelines
   - Create templates for recurring content types
   - Optimize titles, descriptions, and images for SEO
   - Use built-in features like cards and formatting tools

2. **Technical Best Practices**
   - Keep Ghost and Node.js versions updated
   - Use separate environments for development and production
   - Implement proper caching and CDN strategies
   - Optimize assets for performance
   - Follow Handlebars best practices in theme development
   - Use the API for custom integrations
   - Implement proper error handling
   - Follow accessibility standards

3. **Maintenance Recommendations**
   - Regular backups of content and database
   - Monitor server performance
   - Use staging environments for testing updates
   - Establish update procedures for Ghost core
   - Keep themes and custom code versioned
   - Document custom implementations
   - Monitor error logs regularly

4. **Development Workflow**
   - Use version control for all custom code
   - Implement continuous integration and testing
   - Document theme features and customizations
   - Create a development environment that mirrors production
   - Integrate automated testing in deployment workflow
   - Perform regular security audits
   - Follow semantic versioning for theme releases

5. **Performance Optimization Checklist**
   - Optimize images before upload
   - Minimize HTTP requests
   - Implement lazy loading for images and non-critical content
   - Use browser caching for static assets
   - Minify CSS and JavaScript files
   - Defer non-critical JavaScript
   - Optimize Core Web Vitals
   - Implement responsive images with srcset
   - Use a CDN for assets

## Resources and References

- [Ghost Official Documentation](mdc:https:/ghost.org/docs)
- [Ghost Themes Documentation](mdc:https:/ghost.org/docs/themes)
- [Ghost API Documentation](mdc:https:/ghost.org/docs/api)
- [Ghost CLI Documentation](mdc:https:/ghost.org/docs/ghost-cli)
- [Ghost Forum](mdc:https:/forum.ghost.org)
- [Ghost Theme Marketplace](mdc:https:/ghost.org/marketplace)
- [Ghost GitHub Repository](mdc:https:/github.com/TryGhost/Ghost)
- [GScan Theme Validator](mdc:https:/github.com/TryGhost/GScan)
- [Alpine.js Documentation](mdc:https:/alpinejs.dev)